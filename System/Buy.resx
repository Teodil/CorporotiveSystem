<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOm6AQDpugEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAIgAAAIQAAACEAAAAIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAFQAAAHIAAADYAAAA1QAAANUAAADYAAAAcgAAABUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAACwAAAFoAAADKAAAA3wAAAH8AAAAcAAAAHAAAAH8AAADfAAAAygAAAFoAAAALAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAA
        AAsAAAAJAAAADQAAAEQAAAC3AAAA5gAAAJcAAAAqAAAAAAAAAAAAAAAAAAAAAAAAACoAAACXAAAA5gAA
        ALcAAABEAAAADQAAAAkAAAALAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AC0AAACZAAAAVgAAAEcAAADDAAAA6gAAAK4AAAA6AAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAA6AAAArgAAAOoAAADDAAAARwAAAFYAAACZAAAALQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAABgAAAHAAAABCAAAAHAAAAHEAAADZAAAA/wAAAP8AAADbAAAAdAAAAB0AAAA/AAAAbAAA
        AAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAFcAAADPAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA0gAA
        AFwAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAVQAAAMoAAAD+AAAA/wAAAP8AAAD/AAAA/wAA
        AP4AAADKAAAAVgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAHAAAADYAAAA/wAA
        AP8AAADYAAAAbwAAABUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ACIAAACBAAAAgQAAACIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//AP///AA///AAD/4AAAB4AAAAEAAAAAAAGAAAABgAAAAYAAAAGAAAAB
        gAAAAYAAAAGAAAABgAAAAYAAAAPAAAAAAADAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAAD8AAAD/gA
        AB/+AAB//wAA//8AAP//gAH//8AD///wD/8=
</value>
  </data>
</root>